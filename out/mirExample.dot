digraph MIR {
  graph [compound=true, fontsize=12];
  node [shape=box, fontname="Courier New", fontsize=10];
  edge [fontname="Courier New", fontsize=10];

  /* ----------------- function: $start$ ----------------- */
  subgraph cluster_start {
    label = "$start$";
    color = "#cfe2ff";
    style = "rounded,filled";

    "start::entry" [label="$entry\n\nn#0 = 27\npush_param n#0\nres#0 = call floor_sqrt#0(1)\nprint res#0\nt5 = call do_nothing#0(0)"];
  }

  /* ----------------- function: do_nothing#0 ----------------- */
  subgraph cluster_do_nothing_0 {
    label = "do_nothing#0";
    color = "#cfe2ff";
    style = "rounded,filled";

    "do_nothing#0::entry" [label="$entry\n\nprint 1"];
    "do_nothing#0::entry::return" [label="return", shape=oval];
    "do_nothing#0::entry" -> "do_nothing#0::entry::return" [label="return"];
  }

  /* ----------------- function: floor_sqrt#0 ----------------- */
  subgraph cluster_floor_sqrt_0 {
    label = "floor_sqrt#0";
    color = "#cfe2ff";
    style = "rounded,filled";

    "floor_sqrt#0::entry" [label="$entry\n\nguess#1 = 0\nt0 = n#1 > 0 (i32)\nif t0 goto $consequent_0 else $end_if_0"];
    "floor_sqrt#0::consequent_0" [label="$consequent_0\n\ngoto $begin_loop_0"];
    "floor_sqrt#0::begin_loop_0" [label="$begin_loop_0\n\nt1 = guess#1 + 1 (i32)\nt2 = guess#1 + 1 (i32)\nt3 = t1 * t2 (i32)\nt4 = t3 <= n#1 (i32)\nloop t4 body $loop_body_0 end $end_loop_0"];
    "floor_sqrt#0::loop_body_0" [label="$loop_body_0\n\nguess#1 = guess#1 + 1 (i32)\ngoto $begin_loop_0"];
    "floor_sqrt#0::end_loop_0" [label="$end_loop_0\n\nresult#1 = guess#1\ngoto $end_if_0"];
    "floor_sqrt#0::end_if_0" [label="$end_if_0\n\nreturn result#1"];
    "floor_sqrt#0::end_if_0::return" [label="return", shape=oval];
    "floor_sqrt#0::end_if_0" -> "floor_sqrt#0::end_if_0::return" [label="return"];

    /* intra-function CFG edges */
    "floor_sqrt#0::entry" -> "floor_sqrt#0::consequent_0" [label="true"];
    "floor_sqrt#0::entry" -> "floor_sqrt#0::end_if_0" [label="false"];
    "floor_sqrt#0::consequent_0" -> "floor_sqrt#0::begin_loop_0";
    "floor_sqrt#0::begin_loop_0" -> "floor_sqrt#0::loop_body_0" [label="loop_body"];
    "floor_sqrt#0::begin_loop_0" -> "floor_sqrt#0::end_loop_0" [label="loop_end"];
    "floor_sqrt#0::loop_body_0" -> "floor_sqrt#0::begin_loop_0";
    "floor_sqrt#0::end_loop_0" -> "floor_sqrt#0::end_if_0";
  }

  /* ----------------- interprocedural call edges ----------------- */
  "start::entry" -> "floor_sqrt#0::entry" [style=dashed label="call"];
  "start::entry" -> "do_nothing#0::entry" [style=dashed label="call"];

}
